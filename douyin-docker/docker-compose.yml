version: '3.5'
# 网络配置
networks:
  backend:
    driver: ${NETWORKS_DRIVER}

# 服务容器配置
services:

  mysql:
    build:
      context: ./mysql
    # docker安全验证
    security_opt:
      - seccomp:unconfined
    environment:
      - TZ=${TZ}
      - MYSQL_USER=${MYSQL_USERNAME}                  # 设置 Mysql 用户名称
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}              # 设置 Mysql 用户密码
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}    # 设置 Mysql root 用户密码
    volumes:
      - ./db:/var/lib/mysql
      - ./conf:/etc/mysql/conf.d
      - ./logs:/logs
    ports:
      - "${MYSQL_PORT}:3306"                          # 设置容器3306端口映射指定宿主机端口
    networks:
      - backend
    command: 
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_general_ci
      --explicit_defaults_for_timestamp=true
    restart: always
    

  redis:
    build:
      context: ./redis
    environment:
      - TZ=${TZ}
    volumes:
      - ${DATA_PATH_HOST}/redis:/data                 # 引用 .env 配置中 DATA_PATH_HOST 变量，将宿主机上存放 Redis 数据的目录挂载到容器中 /data 目录
    ports:
      - "${REDIS_PORT}:6379"                          # 设置容器6379端口映射指定宿主机端口
    networks:
      - backend
    restart: always

  zookeeper:
    image: docker.io/bitnami/zookeeper:3.8
    hostname: zoo1
    ports:
      - "${ZOOKEEPER_PORT}:2181"
    volumes:
      - ${DATA_PATH_HOST}/zookeeper:/zookeeper_data
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - backend
    restart: always
  kafka:
    image: docker.io/bitnami/kafka:3.2
    ports:
      - "${KAFKA_PORT}:9092"
      - "29092:29092"
    volumes:
      - ${DATA_PATH_HOST}/kafka:/kafka_data
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_LISTENERS=PLAINTEXT://:9092,PLAINTEXT_HOST://:29092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092 # 此处需要换成公网地址,记得删除之前的数据文件
    depends_on:
      - zookeeper
    networks:
      - backend
    restart: always