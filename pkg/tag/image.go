package tag

import (
	"encoding/json"
	"fmt"

	"github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common"
	"github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common/errors"
	"github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common/profile"
	tiia "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/tiia/v20190529"
)

// AutoGenerated 腾讯图像检测API接口
type AutoGenerated struct {
	Response Response `json:"Response"`
}
type Labels struct {
	Name           string `json:"Name"`
	Confidence     int    `json:"Confidence,omitempty"`
	FirstCategory  string `json:"FirstCategory,omitempty"`
	SecondCategory string `json:"SecondCategory,omitempty"`
}
type Response struct {
	Labels    []Labels `json:"Labels"`
	RequestID string   `json:"RequestId "`
}

// DetectTag 检测图片的标签
func DetectTag(url string) ([]string, error) {
	var tags []string
	credential := common.NewCredential(
		"AKIDc3HtIURQTWSIOOG4nS0TsCQYcbWM4e6Q",
		"JTWYToGcrxqY7awDKI5kZxBHGnBQZZhh",
	)
	cpf := profile.NewClientProfile()
	cpf.HttpProfile.Endpoint = "tiia.tencentcloudapi.com"
	client, _ := tiia.NewClient(credential, "ap-beijing", cpf)

	request := tiia.NewDetectLabelRequest()
	request.ImageUrl = common.StringPtr(url)

	response, err := client.DetectLabel(request)
	if _, ok := err.(*errors.TencentCloudSDKError); ok {
		fmt.Printf("An API error has returned: %s", err)
		return tags, err
	}
	if err != nil {
		return tags, err
	}
	res := AutoGenerated{}
	jsonStr := response.ToJsonString()
	err = json.Unmarshal([]byte(jsonStr), &res)
	if err != nil {
		return tags, err
	}

	categories := map[string]struct{}{}
	for _, l := range res.Response.Labels {
		categories[l.FirstCategory] = struct{}{}
		categories[l.SecondCategory] = struct{}{}
	}
	tags = make([]string, 0, len(categories)) // 获取所有keys
	for k, _ := range categories {
		tags = append(tags, k)
	}
	return tags, nil
}
